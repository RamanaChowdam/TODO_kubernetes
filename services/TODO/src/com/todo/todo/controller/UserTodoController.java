/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.todo.todo.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.todo.todo.UserTodo;
import com.todo.todo.service.UserTodoService;


/**
 * Controller object for domain model class UserTodo.
 * @see UserTodo
 */
@RestController("TODO.UserTodoController")
@Api(value = "UserTodoController", description = "Exposes APIs to work with UserTodo resource.")
@RequestMapping("/TODO/UserTodo")
public class UserTodoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserTodoController.class);

    @Autowired
	@Qualifier("TODO.UserTodoService")
	private UserTodoService userTodoService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new UserTodo instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserTodo createUserTodo(@RequestBody UserTodo userTodo) {
		LOGGER.debug("Create UserTodo with information: {}" , userTodo);

		userTodo = userTodoService.create(userTodo);
		LOGGER.debug("Created UserTodo with information: {}" , userTodo);

	    return userTodo;
	}

    @ApiOperation(value = "Returns the UserTodo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserTodo getUserTodo(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting UserTodo with id: {}" , id);

        UserTodo foundUserTodo = userTodoService.getById(id);
        LOGGER.debug("UserTodo details with id: {}" , foundUserTodo);

        return foundUserTodo;
    }

    @ApiOperation(value = "Updates the UserTodo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserTodo editUserTodo(@PathVariable("id") Integer id, @RequestBody UserTodo userTodo) {
        LOGGER.debug("Editing UserTodo with id: {}" , userTodo.getId());

        userTodo.setId(id);
        userTodo = userTodoService.update(userTodo);
        LOGGER.debug("UserTodo details with id: {}" , userTodo);

        return userTodo;
    }
    
    @ApiOperation(value = "Partially updates the UserTodo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserTodo patchUserTodo(@PathVariable("id") Integer id, @RequestBody @MapTo(UserTodo.class) Map<String, Object> userTodoPatch) {
        LOGGER.debug("Partially updating UserTodo with id: {}" , id);

        UserTodo userTodo = userTodoService.partialUpdate(id, userTodoPatch);
        LOGGER.debug("UserTodo details after partial update: {}" , userTodo);

        return userTodo;
    }

    @ApiOperation(value = "Deletes the UserTodo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUserTodo(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting UserTodo with id: {}" , id);

        UserTodo deletedUserTodo = userTodoService.delete(id);

        return deletedUserTodo != null;
    }

    /**
     * @deprecated Use {@link #findUserTodos(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of UserTodo instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<UserTodo> searchUserTodosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UserTodos list by query filter:{}", (Object) queryFilters);
        return userTodoService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserTodo instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserTodo> findUserTodos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserTodos list by filter:", query);
        return userTodoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserTodo instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<UserTodo> filterUserTodos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserTodos list by filter", query);
        return userTodoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportUserTodos(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return userTodoService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportUserTodosAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = UserTodo.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> userTodoService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of UserTodo instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countUserTodos( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting UserTodos");
		return userTodoService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getUserTodoAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return userTodoService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserTodoService instance
	 */
	protected void setUserTodoService(UserTodoService service) {
		this.userTodoService = service;
	}

}