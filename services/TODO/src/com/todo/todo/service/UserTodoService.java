/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.todo.todo.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.todo.todo.UserTodo;

/**
 * Service object for domain model class {@link UserTodo}.
 */
public interface UserTodoService {

    /**
     * Creates a new UserTodo. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserTodo if any.
     *
     * @param userTodo Details of the UserTodo to be created; value cannot be null.
     * @return The newly created UserTodo.
     */
    UserTodo create(@Valid UserTodo userTodo);


	/**
     * Returns UserTodo by given id if exists.
     *
     * @param usertodoId The id of the UserTodo to get; value cannot be null.
     * @return UserTodo associated with the given usertodoId.
	 * @throws EntityNotFoundException If no UserTodo is found.
     */
    UserTodo getById(Integer usertodoId);

    /**
     * Find and return the UserTodo by given id if exists, returns null otherwise.
     *
     * @param usertodoId The id of the UserTodo to get; value cannot be null.
     * @return UserTodo associated with the given usertodoId.
     */
    UserTodo findById(Integer usertodoId);

	/**
     * Find and return the list of UserTodos by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param usertodoIds The id's of the UserTodo to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return UserTodos associated with the given usertodoIds.
     */
    List<UserTodo> findByMultipleIds(List<Integer> usertodoIds, boolean orderedReturn);


    /**
     * Updates the details of an existing UserTodo. It replaces all fields of the existing UserTodo with the given userTodo.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserTodo if any.
     *
     * @param userTodo The details of the UserTodo to be updated; value cannot be null.
     * @return The updated UserTodo.
     * @throws EntityNotFoundException if no UserTodo is found with given input.
     */
    UserTodo update(@Valid UserTodo userTodo);


    /**
     * Partially updates the details of an existing UserTodo. It updates only the
     * fields of the existing UserTodo which are passed in the userTodoPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserTodo if any.
     *
     * @param usertodoId The id of the UserTodo to be deleted; value cannot be null.
     * @param userTodoPatch The partial data of UserTodo which is supposed to be updated; value cannot be null.
     * @return The updated UserTodo.
     * @throws EntityNotFoundException if no UserTodo is found with given input.
     */
    UserTodo partialUpdate(Integer usertodoId, Map<String, Object> userTodoPatch);

    /**
     * Deletes an existing UserTodo with the given id.
     *
     * @param usertodoId The id of the UserTodo to be deleted; value cannot be null.
     * @return The deleted UserTodo.
     * @throws EntityNotFoundException if no UserTodo found with the given id.
     */
    UserTodo delete(Integer usertodoId);

    /**
     * Deletes an existing UserTodo with the given object.
     *
     * @param userTodo The instance of the UserTodo to be deleted; value cannot be null.
     */
    void delete(UserTodo userTodo);

    /**
     * Find all UserTodos matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserTodos.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<UserTodo> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all UserTodos matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserTodos.
     *
     * @see Pageable
     * @see Page
     */
    Page<UserTodo> findAll(String query, Pageable pageable);

    /**
     * Exports all UserTodos matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all UserTodos matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the UserTodos in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the UserTodo.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}