/*Copyright (c) 2020-2021 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.todo.todo.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.todo.todo.UserTodo;


/**
 * ServiceImpl object for domain model class UserTodo.
 *
 * @see UserTodo
 */
@Service("TODO.UserTodoService")
@Validated
public class UserTodoServiceImpl implements UserTodoService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserTodoServiceImpl.class);


    @Autowired
    @Qualifier("TODO.UserTodoDao")
    private WMGenericDao<UserTodo, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<UserTodo, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TODOTransactionManager")
    @Override
    public UserTodo create(UserTodo userTodo) {
        LOGGER.debug("Creating a new UserTodo with information: {}", userTodo);

        UserTodo userTodoCreated = this.wmGenericDao.create(userTodo);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(userTodoCreated);
    }

    @Transactional(readOnly = true, value = "TODOTransactionManager")
    @Override
    public UserTodo getById(Integer usertodoId) {
        LOGGER.debug("Finding UserTodo by id: {}", usertodoId);
        return this.wmGenericDao.findById(usertodoId);
    }

    @Transactional(readOnly = true, value = "TODOTransactionManager")
    @Override
    public UserTodo findById(Integer usertodoId) {
        LOGGER.debug("Finding UserTodo by id: {}", usertodoId);
        try {
            return this.wmGenericDao.findById(usertodoId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No UserTodo found with id: {}", usertodoId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TODOTransactionManager")
    @Override
    public List<UserTodo> findByMultipleIds(List<Integer> usertodoIds, boolean orderedReturn) {
        LOGGER.debug("Finding UserTodos by ids: {}", usertodoIds);

        return this.wmGenericDao.findByMultipleIds(usertodoIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TODOTransactionManager")
    @Override
    public UserTodo update(UserTodo userTodo) {
        LOGGER.debug("Updating UserTodo with information: {}", userTodo);

        this.wmGenericDao.update(userTodo);
        this.wmGenericDao.refresh(userTodo);

        return userTodo;
    }

    @Transactional(value = "TODOTransactionManager")
    @Override
    public UserTodo partialUpdate(Integer usertodoId, Map<String, Object>userTodoPatch) {
        LOGGER.debug("Partially Updating the UserTodo with id: {}", usertodoId);

        UserTodo userTodo = getById(usertodoId);

        try {
            ObjectReader userTodoReader = this.objectMapper.reader().forType(UserTodo.class).withValueToUpdate(userTodo);
            userTodo = userTodoReader.readValue(this.objectMapper.writeValueAsString(userTodoPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", userTodoPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        userTodo = update(userTodo);

        return userTodo;
    }

    @Transactional(value = "TODOTransactionManager")
    @Override
    public UserTodo delete(Integer usertodoId) {
        LOGGER.debug("Deleting UserTodo with id: {}", usertodoId);
        UserTodo deleted = this.wmGenericDao.findById(usertodoId);
        if (deleted == null) {
            LOGGER.debug("No UserTodo found with id: {}", usertodoId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), UserTodo.class.getSimpleName(), usertodoId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TODOTransactionManager")
    @Override
    public void delete(UserTodo userTodo) {
        LOGGER.debug("Deleting UserTodo with {}", userTodo);
        this.wmGenericDao.delete(userTodo);
    }

    @Transactional(readOnly = true, value = "TODOTransactionManager")
    @Override
    public Page<UserTodo> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UserTodos");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TODOTransactionManager")
    @Override
    public Page<UserTodo> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UserTodos");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TODOTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TODO for table UserTodo to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TODOTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TODO for table UserTodo to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TODOTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TODOTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}